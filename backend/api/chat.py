"""
REST API endpoint definitions for the portfolio chatbot.  This module
defines a single POST endpoint under /api/chat which accepts user
queries along with a session identifier and returns a response
generated by the AI backend.  Validation of the incoming payload is
performed via pydantic models.  Error handling ensures that invalid
requests return a 400 and unexpected errors return a 500 status.
"""

from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel
from core.chat_logic import process_chat_query


router = APIRouter()


class ChatRequest(BaseModel):
    """Schema for incoming chat requests."""
    userInput: str
    sessionId: str


@router.post("/chat", tags=["Chat"])
async def handle_chat_request(chat_request: ChatRequest) -> dict:
    """
    Handle a POST request to the /api/chat endpoint.  Validates the
    request body and delegates to the chat logic to generate an
    appropriate response.  Returns a JSON object with the model's
    response text.
    """
    if not chat_request.userInput or not chat_request.sessionId:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User input and session ID are required."
        )

    try:
        response_text: str = process_chat_query(
            user_query=chat_request.userInput,
            session_id=chat_request.sessionId,
        )
        return {"response": response_text}
    except Exception as exc:
        # Log the exception to stdout for troubleshooting in cloudwatch
        print(f"An unexpected error occurred in chat endpoint: {exc}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="An internal server error occurred."
        )


