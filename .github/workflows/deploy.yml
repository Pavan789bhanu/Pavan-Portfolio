name: Deploy Portfolio

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      VITE_API_BASE: ${{ secrets.VITE_API_BASE }}

    steps:
    # --- Checkout Repo ---
    - name: Checkout Code
      uses: actions/checkout@v3

    # --- Setup Node.js for Frontend ---
    - name: Setup Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: 20

    # --- Setup Python for Backend ---
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    # --- Configure AWS Credentials ---
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # =======================
    #  BACKEND DEPLOY (Lambda)
    # =======================
    - name: Install Backend Dependencies
      working-directory: backend
      run: |
        pip install -r requirements.txt -t package
        cp -r api core main.py data package/

    - name: Zip Backend for Lambda
      working-directory: backend/package
      run: zip -r ../../lambda.zip .

    - name: Deploy Lambda
      run: |
        aws lambda update-function-code \
          --function-name "$LAMBDA_FUNCTION_NAME" \
          --zip-file fileb://lambda.zip

    # =======================
    #  FRONTEND DEPLOY (S3 + CloudFront)
    # =======================
    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm install

    - name: Build Frontend
      working-directory: frontend
      env:
        VITE_API_BASE: ${{ secrets.VITE_API_BASE }}
      run: npm run build

    - name: Upload Frontend to S3
      run: aws s3 sync frontend/dist "s3://$S3_BUCKET" --delete

    - name: Invalidate CloudFront Cache
      env:
        CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      run: |
        echo "Invalidating CloudFront distribution: $CLOUDFRONT_DISTRIBUTION_ID"
        aws cloudfront create-invalidation \
        --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
        --paths "/*"

